package com.wondersgroup.api.framework.mybatis.dialect;

import com.wondersgroup.api.framework.db.OperationCoreImpl;
import com.wondersgroup.api.framework.exception.BusinessException;
import com.wondersgroup.api.framework.logger.Logger;

public class MySqlDialect extends Dialect implements IDialect {

	public boolean supportsLimitOffset() {
		return true;
	}

	public boolean supportsLimit() {
		return true;
	}

	public String getLimitString(String sql, int offset,
			String offsetPlaceholder, int limit, String limitPlaceholder) {
		if (offset > 0) {
			return sql + " limit " + offsetPlaceholder + "," + limitPlaceholder;
		} else {
			return sql + " limit " + limitPlaceholder;
		}
	}

	private static final Logger logger = new Logger(
			MySqlDialect.class.getName());

	@Override
	public String getDatabaseName() {
//		init();
		return "mysql";
	}

	private static final String CREATE_TOKEN = "CREATE TABLE IF NOT EXISTS TOKEN(ID VARCHAR(100) NOT NULL,TTL BIGINT,USERID VARCHAR(36),CREATEAT DATETIME,UPDATEAT DATETIME)";
	private static final String CREATE_FILE = "CREATE TABLE IF NOT EXISTS FILE(ID VARCHAR(36) NOT NULL,NAME VARCHAR(50),URL VARCHAR(400),TYPE VARCHAR(50),SIZE BIGINT,CREATEAT DATETIME,UPDATEAT DATETIME)";
	private static final String CREATE_ROLE = "CREATE TABLE IF NOT EXISTS ROLE(ID VARCHAR(36) NOT NULL,NAME VARCHAR(50),DESCRIPTION VARCHAR(400),PRINCIPALS VARCHAR(50),CREATEAT DATETIME,UPDATEAT DATETIME)";
	private static final String CREATE_ROLEMAPPING = "CREATE TABLE IF NOT EXISTS ROLEMAPPING(ID VARCHAR(36) NOT NULL,PRINCIPALTYPE VARCHAR(50),PRINCIPALID VARCHAR(50),CREATEAT DATETIME,UPDATEAT DATETIME)";
	private static final String CREATE_USER = "CREATE TABLE IF NOT EXISTS USER(ID VARCHAR(36) NOT NULL,USERNAME VARCHAR(50),PASSWORD VARCHAR(50),EMAIL VARCHAR(50),EMAILVERIFIED INT,ACCESSTOKENS VARCHAR(100),MOBILE VARCHAR(20),CREATEAT DATETIME,UPDATEAT DATETIME)";
	private static final String CREATE_SQLCONFIG = "CREATE TABLE IF NOT EXISTS SYS_SQL_CONFIG(ID VARCHAR(36) NOT NULL,SQLKEY VARCHAR(50),SQLCONTEXT VARCHAR(400),SQLDESC VARCHAR(200))";
	private static final String CREATE_SYS_ENGINE_GRID_DIC = "CREATE TABLE IF NOT EXISTS SYS_ENGINE_GRID_DIC(ID VARCHAR(32),DIC_GRID_CODE VARCHAR(64),OBJECT_NAME VARCHAR(64),ID_FIELD VARCHAR(30),TEXT_FIELD VARCHAR(30),COLS_CONFIG VARCHAR(512),DIC_GRID_NAME VARCHAR(64))";
	private static final String CREATE_SYS_ENGINE_TABLE = "CREATE TABLE IF NOT EXISTS SYS_ENGINE_TABLE(ID VARCHAR(32),OBJECT_NAME VARCHAR(64),TABLE_NAME  VARCHAR(30), NOTE_NAME VARCHAR(256))";
	private static final String CREATE_SYS_ENGINE_TABLE_BUSSINESS = "CREATE TABLE IF NOT EXISTS SYS_ENGINE_TABLE_BUSSINESS(ID VARCHAR(32),BUSINESS_TYPE VARCHAR(30),COL_NAME      VARCHAR(30),COLID VARCHAR(32),OBJECT_NAME VARCHAR(30),TABLE_ID VARCHAR(32),BUSINESS_OP VARCHAR(32),COL_WIDTH INT)";
	private static final String CREATE_SYS_ENGINE_TABLE_BUTTON = "CREATE TABLE IF NOT EXISTS SYS_ENGINE_TABLE_BUTTON(ID VARCHAR(32),BUTTON_NAME  VARCHAR(32),BUTTON_ICON  VARCHAR(32),BUTTON_EVENT VARCHAR(128),OBJECT_NAME VARCHAR(30),ENABLE INT,SHOW_INDEX INTEGER,DIV_AREA VARCHAR(30))";
	private static final String CREATE_SYS_ENGINE_TABLE_COL = "CREATE TABLE IF NOT EXISTS SYS_ENGINE_TABLE_COL(ID VARCHAR(32),TABLE_ID VARCHAR(32),COL_NAME VARCHAR(30),NOTE_NAME       VARCHAR(256),DATA_TYPE VARCHAR(32),DATA_OPTIONS VARCHAR(168),DATA_LENGTH INT,  DATA_PRECISION  INT,DATA_SCALE INT,NULLABLE INT DEFAULT 0 NOT NULL,PK_SEQ INT DEFAULT 0 NOT NULL,DIC_CODE VARCHAR(200),HIDDEN_TYPE INT DEFAULT 1 NOT NULL,  OBJECT_NAME VARCHAR(30),IS_SEARCH INT DEFAULT 0,SEARCH_OPERATOR VARCHAR(16),DIC_TYPE VARCHAR(200))";
	private static final String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS PRO_TABLE(ID VARCHAR(32),CLASSES VARCHAR(32),NOTICE VARCHAR(2000))";
	private static final String CREATE_TABLE_COL = "CREATE TABLE IF NOT EXISTS PRO_TABLE_COL(ID VARCHAR(32),CLASSES VARCHAR(32),COL_NAME VARCHAR(30),NOTE_NAME VARCHAR(256),DATA_TYPE VARCHAR(32),DATA_OPTIONS VARCHAR(168),DATA_LENGTH INT,  DATA_PRECISION  INT,DATA_SCALE INT,NULLABLE INT DEFAULT 0 NOT NULL,PK_SEQ INT DEFAULT 0 NOT NULL,DIC_CODE VARCHAR(200),HIDDEN_TYPE INT DEFAULT 1 NOT NULL,  OBJECT_NAME VARCHAR(30),IS_SEARCH INT DEFAULT 0,SEARCH_OPERATOR VARCHAR(16),DIC_TYPE VARCHAR(200))";
	
	public void init() {
		try {
			createTable(CREATE_TOKEN);
			createTable(CREATE_FILE);
			createTable(CREATE_ROLE);
			createTable(CREATE_ROLEMAPPING);
			createTable(CREATE_USER);
			createTable(CREATE_SQLCONFIG);
			createTable(CREATE_SYS_ENGINE_GRID_DIC);
			createTable(CREATE_SYS_ENGINE_TABLE);
			createTable(CREATE_SYS_ENGINE_TABLE_BUSSINESS);
			createTable(CREATE_SYS_ENGINE_TABLE_BUTTON);
			createTable(CREATE_SYS_ENGINE_TABLE_COL);
			createTable(CREATE_TABLE);
			createTable(CREATE_TABLE_COL);

		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException(e);
		}
	}

	protected void createTable(String sql) throws Exception {
		OperationCoreImpl impl = OperationCoreImpl.createFactory();
		impl.executeUpdate(sql);
	}

	@Override
	public String buildPageSqlPrefix() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String buildPageSqlSubfix() {
		// TODO Auto-generated method stub
		return null;
	}

}
